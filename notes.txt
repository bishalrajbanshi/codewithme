// // string is immutable in js "once it is created it cannot be changed"

// // slice
// // slice method = cut and brings the string 
// str.slice(startindex,endindex);


// // replace and repeat
// msg.repeat(counter)
// msg.replace("whattoreplace","replaceword")

// //string 
// exapmle1.concat(example2) //join two strings

// //array search
// example.indexOf("example") //return the index of a example if it doesnot exist it retun -1

// example.include("example")//if the example in an array exist returns true if it doesnot exist it returns false

// //in js if we reverse the array it also changes in original array

// //slice in array
// //Array.slice("startidx","endidx")// it reutrn new array and doesnot make changes in original array

// //spliace
// // Array.splice("startnumber","deletecount")

//use split('') to convert the string into an array of characters.

// // array
// // str.push("add to end")
// // str.toUpperCase("remove from end")
// // str.unShift("add to start")
// // str.shift("remove form start")

// // js array is muitable changes can be made in original array



// //note 
// //array refrence  = address in memory
// //refrence variable keep the memory address not the value

// //in array the const array means you cannot assign the new array to const array but the is not constant and it  is dyanmic 
// //assignmant ot constant variable is not possible

// //objextleterls is used to keep the complex data 
// //object leterls keep the key and its value



// //math object in js
// //use Math.objectname
// //change positive to negative and  negative to positive
// // Math.abs for absolute value

// //Math.pow(a,b)
// //Math.floor() uset to roundoff nearest smallest value
// //Math.cell()uset to roundoff nearest largest value
// // Math.Random() take the random value from 0 to 1





//js scope
//Scope determines the accessibility of variables, objects, and functions from different parts  of the code.

//Function Scope
//Variables defined inside a function are not accessible (visible) from outside the function.
//Function Scope Variables defined inside a function are not accessible (visible) from outside the function.


//-Block Scope
//Variables declared inside a { ) block cannot be accessed from outside the block.

//Lexical Scope
//a variable defined outside a function can be accessible inside another function defined after the variable declaration.
// The opposite is NOT true.

// this Keyword  "This" keyword refers to an object that is executing the current piece of code.

//try & catch
//The try statement allows you to define a block of code to be tested for errors while it is being executed.
//The catch statement allows you to define a block of code to be executed, if an error occurs in the try block;

//implicite return is automatically return 


//callback function is the function that goes as a argument to another function



// this with arrow function

//Arrow function
// lexical scope -> parent scope = this

//function
// scope => this -> calling object



//reduce function
//Reduces the array to a single value
//arr.reduce(reducer function with 2 variables for (accumulator,element))


//spread
//expand an iterable into multiple value it takes the single value like array string and give multiple value


//Rest Allows a function to take an indefinite number of arguments and bundle them in an array
//funv(...args){}

//Destructuring Storing values of array into multiple variables

  
//DOM Document Object Model
The DOM represent a document with a logical tree
It allows us to manupulate change webpage content (HTML elements )

using properties and methods

innerText - shows the visible texxt contained in a node

textContext - shows all the full text(hidden also)

innerHTML - shows the full markup (html)


More Events
change event
The change event occurs when the value of an element has been changed (only works on <input>, <textarea> and <select> elements).
input event
The input event fires when the value of an , , or element has been changed.


call stack
Breakpoints - used for debugging

callback = take the function as argument to another function


JS memory
primitive(stack) getcopy(variable)
let x = "hello"
let y = x copy of x is given to y

nonprimitive(heap) getrefrence() changes in original value


promises = work
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.(the task you gave is loaded in queue but cannot complet immidately or not loaded)(complet in future) eg youtube videos 
pending: initial state, neither fulfilled nor rejected.
fulfilled: meaning that the operation was completed successfully.
rejected: meaning that the operation failed.


JS single threaded (One work at a time)

when we want to store the vslue in multiple variables 



1. Callback-based, Non-blocking (.then / .catch)
In the .then/.catch style, the code is executed asynchronously through callbacks. This means that after you initiate a promise (like a network request), the rest of your code continues to run without waiting for the promise to resolve. The handling of the result happens later, in the callback functions.
function fetchUserData(userId) {
  console.log('Fetching user data...'); // This executes first

  fetch(`https://api.example.com/users/${userId}`)
    .then(response => {
      console.log('Response received'); // This executes after the fetch completes
      if (!response.ok) {
        throw new Error('User not found');
      }
      return response.json();
    })
    .then(userData => {
      console.log('User Data:', userData); // This executes after parsing the JSON
    })
    .catch(error => {
      console.error('Error fetching user data:', error); // This executes if there's an error
    });

  console.log('Fetch initiated'); // This executes immediately after initiating the fetch
}

// Call the function
fetchUserData(1);

Fetching user data...
Fetch initiated
Response received
User Data: { ... }


2. Synchronous-like Flow (async / await)
With async/await, the code execution appears to be more sequential. The await keyword pauses the execution of the function until the promise is resolved, making it look like synchronous code.

async function fetchUserData(userId) {
  console.log('Fetching user data...'); // This executes first

  try {
    const response = await fetch(`https://api.example.com/users/${userId}`);
    console.log('Response received'); // This executes after the fetch completes

    if (!response.ok) {
      throw new Error('User not found');
    }

    const userData = await response.json();
    console.log('User Data:', userData); // This executes after parsing the JSON
  } catch (error) {
    console.error('Error fetching user data:', error); // This executes if there's an error
  }

  console.log('Fetch completed'); // This executes after the try-catch block
}

// Call the function
fetchUserData(1);

Fetching user data...
Response received
User Data: { ... }
Fetch completed

In this case, the execution flow is more linear. Each line of code after await waits for the previous promise to resolve. As a result, the sequence of logs is clearer and more intuitive, resembling traditional synchronous code execution.

Summary
.then / .catch: Code executes in a non-blocking manner. The program continues to run while waiting for the promise, which can lead to a more complex flow and callback nesting.
async / await: Code execution appears synchronous, making it easier to read and understand. Each await statement pauses execution until the promise is resolved, simplifying the control flow.