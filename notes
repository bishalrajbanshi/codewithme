// // string is immutable in js "once it is created it cannot be changed"

// // slice
// // slice method = cut and brings the string 
// str.slice(startindex,endindex);


// // replace and repeat
// msg.repeat(counter)
// msg.replace("whattoreplace","replaceword")

// //string 
// exapmle1.concat(example2) //join two strings

// //array search
// example.indexOf("example") //return the index of a example if it doesnot exist it retun -1

// example.include("example")//if the example in an array exist returns true if it doesnot exist it returns false

// //in js if we reverse the array it also changes in original array

// //slice in array
// //Array.slice("startidx","endidx")// it reutrn new array and doesnot make changes in original array

// //spliace
// // Array.splice("startnumber","deletecount")

//use split('') to convert the string into an array of characters.

// // array
// // str.push("add to end")
// // str.toUpperCase("remove from end")
// // str.unShift("add to start")
// // str.shift("remove form start")

// // js array is muitable changes can be made in original array



// //note 
// //array refrence  = address in memory
// //refrence variable keep the memory address not the value

// //in array the const array means you cannot assign the new array to const array but the is not constant and it  is dyanmic 
// //assignmant ot constant variable is not possible

// //objextleterls is used to keep the complex data 
// //object leterls keep the key and its value



// //math object in js
// //use Math.objectname
// //change positive to negative and  negative to positive
// // Math.abs for absolute value

// //Math.pow(a,b)
// //Math.floor() uset to roundoff nearest smallest value
// //Math.cell()uset to roundoff nearest largest value
// // Math.Random() take the random value from 0 to 1





//js scope
//Scope determines the accessibility of variables, objects, and functions from different parts  of the code.

//Function Scope
//Variables defined inside a function are not accessible (visible) from outside the function.
//Function Scope Variables defined inside a function are not accessible (visible) from outside the function.


//-Block Scope
//Variables declared inside a { ) block cannot be accessed from outside the block.

//Lexical Scope
//a variable defined outside a function can be accessible inside another function defined after the variable declaration.
// The opposite is NOT true.

// this Keyword  "This" keyword refers to an object that is executing the current piece of code.

//try & catch
//The try statement allows you to define a block of code to be tested for errors while it is being executed.
//The catch statement allows you to define a block of code to be executed, if an error occurs in the try block;

//implicite return is automatically return 


//callback function is the function that goes as a argument to another function



// this with arrow function

//Arrow function
// lexical scope -> parent scope = this

//function
// scope => this -> calling object